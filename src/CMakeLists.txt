cmake_minimum_required(VERSION 3.15...4.1)

project(goopax_examples LANGUAGES CXX)

if (CMAKE_VERSION VERSION_LESS "3.20")
  set (CMAKE_CXX_STANDARD 20)
else()
  set (CMAKE_CXX_STANDARD 23)
endif()

# Disabling cuda examples by default because of compatibility issues between cuda and gcc>=13
option(WITH_CUDA "WITH_CUDA" OFF)

set(CMAKE_INSTALL_RPATH_USE_LINK_PATH on)

if (WIN32)
  if (NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_CONFIGURATION_TYPES "Debug;Release")
  endif()
  if (NOT CMAKE_MSVC_RUNTIME_LIBRARY)
    set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreadedRelease")
  endif()
endif()

if (ANDROID OR IOS)
  message("Applying toolchain workaround, so that packages are found.")
  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE BOTH)
  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)
  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE BOTH)
endif()

find_package(goopax REQUIRED PATHS ../..)
find_package(TBB)
find_package(OpenCL)
find_package(Boost 1.65.0 COMPONENTS multiprecision PATHS "${CMAKE_BINARY_DIR}/ext/boost")
find_package(SDL3 PATHS "${CMAKE_BINARY_DIR}/ext/sdl3")
find_package(Eigen3 3.3 NO_MODULE PATHS "${CMAKE_BINARY_DIR}/ext/eigen")

if (WIN32)
  set(OpenCV_STATIC 1)
endif()
find_package(OpenCV PATHS "${CMAKE_BINARY_DIR}/ext/opencv" "${CMAKE_BINARY_DIR}/ext/opencv/sdk/native/jni")
find_path(GLATTER_INCLUDE_DIR
  glatter/glatter.h
  PATHS "${CMAKE_BINARY_DIR}/ext/build_glatter-prefix/src/build_glatter/include"
)

add_subdirectory(ext)
if (OpenCV_FOUND)
  add_library(opencv INTERFACE)
  target_link_libraries(opencv INTERFACE ${OpenCV_LIBS})
  target_include_directories(opencv SYSTEM INTERFACE ${OpenCV_INCLUDE_DIRS})
endif()
if (GLATTER_INCLUDE_DIR)
  add_library(glatter INTERFACE)
  target_include_directories(glatter SYSTEM INTERFACE "${GLATTER_INCLUDE_DIR}")
endif()

if (APPLE)
  enable_language(OBJCXX)
  set (CMAKE_OBJCXX_STANDARD 20)
  include(cmake/common.cmake)
endif()

if (WITH_CUDA)
  find_package(CUDA REQUIRED)
  enable_language(CUDA)
  set (CMAKE_CUDA_STANDARD 17)
endif()

add_subdirectory(common/draw)

macro(warn_missing)
  set(missing "")
  foreach(L ${ARGN})
    if (NOT TARGET ${L})
      list(APPEND missing "${L}")
    endif()
  endforeach()
endmacro()

macro(add_withfile P FN)
  warn_missing(${ARGN})
  if ("${missing}" STREQUAL "")
    message("building target ${P}")
    add_executable(${P} ${FN})
    install(TARGETS ${P} DESTINATION bin)
    foreach(L ${ARGN})
      target_link_libraries(${P} ${L})
    endforeach()
    target_link_libraries(${P} goopax::goopax)
    if (TARGET TBB::tbb)
      target_link_libraries(${P} TBB::tbb)
    endif()
    if (IOS)
      set_apple_properties(${P})
    endif()

    if (WIN32)
      add_custom_command(
       TARGET ${P} POST_BUILD
       COMMAND ${CMAKE_COMMAND} -E copy_if_different
       "${goopax_DIR}/../../../lib/libgoopax64.dll"
       "$<TARGET_FILE_DIR:${P}>")
    endif()
  else()
    message("not building target ${P} [missing: ${missing}]")
  endif()
endmacro()

macro(add P)
  set(T ${ARGV})
  list(REMOVE_AT T 0)
  add_withfile(${P} ${P}.cpp ${T})
endmacro()

macro(add_android_so_withfile P FN)
  warn_missing(${ARGN})
  if ("${missing}" STREQUAL "")
    message("building target ${P} executable shared object")
    add_library(${P} SHARED ${FN})
    install(TARGETS ${P} DESTINATION bin)
    foreach(L ${ARGN})
      target_link_libraries(${P} ${L})
    endforeach()
    target_link_libraries(${P} goopax::goopax)
  else()
    message("not building target ${P} executable shared object [missing: ${missing}]")
  endif()
endmacro()

macro(add_android_so P)
  add_android_so_withfile(${P} ${P}.cpp ${ARGN})
endmacro()

macro(add_sdl_main)
  if (NOT ANDROID)
    add(${ARGN})
  else()
    add_android_so(${ARGN})
  endif()
endmacro()


if (GOOPAX_DRAW_WITH_OPENGL OR GOOPAX_DRAW_WITH_METAL AND NOT GOOPAX_DEBUG AND NOT ANDROID)
  add_sdl_main(nbody glatter goopax_draw)
  if (APPLE AND TARGET nbody)
    SET_SOURCE_FILES_PROPERTIES(nbody.cpp PROPERTIES LANGUAGE OBJCXX)
  endif()
endif()

add_sdl_main(cosmology glatter goopax_draw)
if (TARGET cosmology)
  if (TARGET opencv)
    target_link_libraries(cosmology opencv)
  endif()
  if (APPLE)
    SET_SOURCE_FILES_PROPERTIES(cosmology.cpp PROPERTIES LANGUAGE OBJCXX)
  endif()
endif()

add_sdl_main(deep-zoom-mandelbrot Boost::boost goopax_draw)
add_sdl_main(mandelbrot goopax_draw)
add_sdl_main(mandelbrot-unspecified goopax_draw)
add_sdl_main(fft opencv goopax_draw)
add(gather goopax_typedefs)
add(svm-pingpong goopax_typedefs)
add(memory-transfer)
add(pi)
add(simple)
add(race-condition)
add(helloworld)
add(matmul Eigen3::Eigen goopax_typedefs)
add(cl-interop-1 OpenCL::OpenCL)
add(cl-interop-2 OpenCL::OpenCL)

if (TARGET mandelbrot)
  target_compile_definitions(mandelbrot PUBLIC -DGOOPAX_ALLOW_DEPRECATED_DEVICES=1)
endif()

if (IOS AND TARGET fft)
  SET_TARGET_PROPERTIES(fft PROPERTIES MACOSX_BUNDLE_INFO_PLIST "${PROJECT_SOURCE_DIR}/ios/fft.plist")
endif()
if (ANDROID AND TARGET fft)
  target_link_libraries(fft mediandk camera2ndk)
endif()

if (WITH_CUDA)
  add_executable(cuda-interop cuda-interop.cu)
  target_link_libraries(cuda-interop goopax::goopax)
  if (TARGET TBB::tbb)
    target_link_libraries(cuda-interop TBB::tbb)
  endif()
endif()
